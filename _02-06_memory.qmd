## Memory {#sec-memory}

{{< include _02-06_memory_text.qmd >}}

```{r}
#| label: setup-memory
#| include: false
# domain
domains <- c("Memory")
# phenotype
pheno <- "memory"
```

```{r}
#| label: export-memory
#| include: false
memory <- readr::read_csv("neurocog.csv") |>
  dplyr::filter(domain == domains) |>
  dplyr::filter(!is.na(z_mean_domain)) |>
  dplyr::select(
    scale, score, z, percentile, range, test_name, domain, subdomain, narrow,
    pass, verbal, timed, description, result, z_mean_domain, z_sd_domain,
    z_mean_subdomain,
    z_sd_subdomain, z_mean_narrow, z_sd_narrow, z_mean_pass, z_sd_pass,
    z_mean_verbal, z_sd_verbal, z_mean_timed, z_sd_timed
  )
readr::write_csv(memory, paste0(pheno, ".csv"))
```

```{r}
#| label: data-memory
#| include: false

# read and filter data
data <- bwu::read_data(pheno = pheno)
scales <- c(
  "CVLT-3 Forced-Choice Recognition Hits",
  "CVLT-3 Total Intrusions",
  "CVLT-3 Total Repetitions",
  "Daily Living Memory Delayed Recall",
  "Daily Living Memory Immediate Recall",
  "Delayed Memory Index",
  "Designs I",
  "Designs II",
  "Figure Recall",
  "Immediate Memory Index",
  "List B Correct",
  "List B Free Recall Correct",
  "List Learning Immediate Recall",
  "List Learning Long Delayed Recall",
  "List Learning Short Delayed Recall",
  "List Learning",
  "List Recall",
  "List Recognition",
  "Logical Memory I",
  "Logical Memory II",
  "Long Delay Cued Recall",
  "Long Delay Free Recall",
  "Long-Delay Cued Recall",
  "Long-Delay Free Recall",
  "Long-Delay Recognition Discriminability",
  "Long-Delay Recognition Response Bias",
  "Memory Domain",
  "Memory for Designs Content",
  "Memory for Designs Delayed Content",
  "Memory for Designs Delayed Spatial",
  "Memory for Designs Delayed",
  "Memory for Designs Spatial",
  "Memory for Designs",
  "Memory for Faces Delayed",
  "Memory for Faces",
  "NAB Memory Index",
  "Narrative Memory Free and Cued Recall",
  "Narrative Memory Free Recall",
  "Narrative Memory Recall",
  "Narrative Memory Recognition",
  "Recognition Discriminability (d')",
  # "Recognition Discriminability Nonparametric",
  "ROCFT Delayed Recall",
  "Sentence Repetition",
  "Shape Learning Delayed Recognition",
  "Shape Learning Immediate Recognition",
  # "Shape Learning Percent Retention",
  "Short Delay Cued Recall",
  "Short Delay Free Recall",
  "Short-Delay Cued Recall",
  "Short-Delay Free Recall",
  "Story Learning Delayed Recall",
  "Story Learning Immediate Recall",
  # "Story Learning Percent Retention",
  "Story Memory",
  "Story Recall",
  # "Total False Positives",
  # "Total Hits",
  "Total Intrusions",
  "Total Repetitions",
  # "Trial 1 Correct",
  # "Trial 1 Free Recall Correct",
  # "Trial 2 Correct",
  # "Trial 3 Correct",
  # "Trial 4 Correct",
  # "Trial 5 Correct",
  # "Trial 5 Free Recall Correct",
  "Trials 1-4 Correct",
  "Trials 1-5 Correct",
  "Trials 1-5 Free Recall Correct",
  "Visual Reproduction I",
  "Visual Reproduction II",
  "Word List Interference-Recall",
  "Word List Interference-Repetition",
  "List Memory Total Trials 1-5",
  "List Memory Total and Delayed Recall",
  "List Memory Repetitions",
  "List Memory Intrusions",
  "List Memory Learning Effect",
  "List Memory Interference Effect",
  "List Memory Delay Effect"
)

data_memory <-
  bwu::filter_data(
    data,
    domain = domains,
    scale = scales
  )
```

```{r}
#| label: text-memory
#| cache: true
#| include: false

bwu::cat_neuropsych_results(data = data_memory, file = "_02-06_memory_text.qmd")
```

```{r}
#| label: qtbl-memory
#| dev: tikz
#| fig-process: pdf2png
#| include: false
options(tikzDefaultEngine = "xetex")

# footnotes
fn_standard_score <- gt::md("Standard Score: Mean = 100 [50th‰], SD ± 15 [16th‰, 84th‰]")
fn_t_score <- gt::md("_T_-Score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]")
fn_scaled_score <- gt::md("Scaled Score: Mean = 10 [50th‰], SD ± 3 [16th‰, 84th‰]")
fn_z_score <- gt::md("_z_-Score: Mean = 0 [50th‰], SD ± 1 [16th‰, 84th‰]")

pheno <- "memory"
table_name <- "table_memory"
grp_memory <- list(
  standard_score = c("CVLT-3", "CVLT-3 Brief"), # Also NAB if decide to keep here
  t_score = c("NAB", "Rey Complex Figure"),
  scaled_score = c("CVLT-3 Brief", "NEPSY-2", "CVLT Child", "CVLT-3")
)
vertical_padding <- 0
multiline <- TRUE

bwu::tbl_gt(
  data = data_memory,
  pheno = pheno,
  table_name = table_name,
  vertical_padding = vertical_padding,
  fn_standard_score = fn_standard_score,
  fn_t_score = fn_t_score,
  fn_scaled_score = fn_scaled_score,
  grp_standard_score = grp_memory[["standard_score"]],
  grp_t_score = grp_memory[["t_score"]],
  grp_scaled_score = grp_memory[["scaled_score"]],
  dynamic_grp = grp_memory,
  multiline = multiline
)
```

```{r}
#| label: fig-memory
#| include: false
#| fig-cap: "Learning and memory refer to the rate and ease with which new information (e.g., facts, stories, lists, faces, names) can be encoded, stored, and later recalled from long-term memory."

# args
exclude <- c("CVLT-3 Total Intrusions", "CVLT-3 Total Repetitions", "CVLT-3 Forced-Choice Recognition Hits")

# memory <- data |>
#   dplyr::filter(!is.na(percentile)) |>
#   dplyr::filter(scale != "NAB Memory Index") |>
#   dplyr::filter(!scale %in% exclude)

x <- data_memory$z_mean_narrow
y <- data_memory$narrow
colors <- NULL
# return_plot <- TRUE
return_plot <- Sys.getenv("RETURN_PLOT")
filename <- "fig_memory.svg"

# Make dotplot
bwu::dotplot(
  data = data_memory,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename
)
```


```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Merriweather", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
    grid(
      columns: (50%, 50%),
      gutter: 8pt,
        figure([#image(file_qtbl)],
          caption: figure.caption(position: top, [#title]),
          kind: "qtbl",
          supplement: [Table],
          ),
        figure([#image(file_fig, width: auto)],
          caption: figure.caption(position: bottom,

          [Learning and memory refer to the rate and ease with which new
          information (e.g., facts, stories, lists, faces, names) can be
          encoded, stored, and later recalled from long-term memory.]),

          placement: none,
          kind: "image",
          supplement: [Figure],
          gap: 0.5em,
        ),
      )
  }
```

```{=typst}
#let title = "Learning and Memory"
#let file_qtbl = "table_memory.png"
#let file_fig = "fig_memory.svg"
#domain(
  title: [#title Test Scores],
  file_qtbl,
  file_fig
)
```
