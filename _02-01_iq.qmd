## General Cognitive Ability {#sec-iq}

{{< include _02-01_iq_text.qmd >}}

```{r}
#| label: setup-iq
#| include: false

# Filter by domain
domains <- c("General Cognitive Ability")

# Target phenotype
pheno <- "iq"
```

```{r}
#| label: export-iq
#| include: false
#| eval: true
# Load necessary libraries
library(readr)
library(dplyr)
library(magrittr)

# Read the CSV file into a data frame
iq <- read_csv("neurocog.csv")

# Filter the data frame to keep only rows where 'domain' equals 'domains'
iq <- iq %>% filter(domain == domains)

# Further filter the data frame to remove rows with NA in 'z_mean_domain'
iq <- iq %>% filter(!is.na(z_mean_domain))

# Select specific columns from the data frame
iq <- iq %>% select(
  scale, score, z, percentile, range, test_name,
  domain, subdomain, narrow, pass, verbal, timed, description, result,
  z_mean_domain, z_sd_domain, z_mean_subdomain,
  z_sd_subdomain, z_mean_narrow, z_sd_narrow, z_mean_pass, z_sd_pass,
  z_mean_verbal, z_sd_verbal, z_mean_timed, z_sd_timed
)

# Write the resulting data frame to a new CSV file
# The file name is created by concatenating the 'pheno' variable and ".csv"
# NA values are replaced with an empty string in the output file
# Column names are included in the output file
# If the file already exists, it is overwritten (not appended)
write_csv(iq, paste0(pheno, ".csv"), na = "", col_names = TRUE, append = FALSE)
```

```{r}
#| label: data-iq
#| include: false
#| eval: true

# Load the bwu library
library(bwu)

# Define the phenotype
pheno <- "iq"

# Read the data using the read_data function from the bwu library
# The phenotype is specified by the 'pheno' variable
data <- bwu::read_data(pheno = pheno)

# Define the scales of interest
scales <- c(
  "Full Scale (FSIQ)",
  "General Ability (GAI)",
  "General Ability",
  "General Intelligence",
  "Test of Premorbid Functioning",
  "TOPF Standard Score",
  "Word Reading",
  "Crystallized Knowledge",
  "Verbal Comprehension (VCI)",
  "Verbal Comprehension",
  "Vocabulary Acquisition (VAI)",
  "Verbal/Language",
  "Verbal Fluency",
  "Fluid Reasoning (FRI)",
  "Fluid Reasoning",
  "Perceptual Reasoning",
  "Perceptual Reasoning (PRI)",
  "Nonverbal (NVI)",
  "Visual Spatial (VSI)",
  "Visual Perception/Construction",
  "Memory",
  "Learning Efficiency",
  "Delayed Recall",
  "Working Memory",
  "Working Memory (WMI)",
  "Auditory Working Memory (AWMI)",
  "Processing Speed",
  "Processing Speed (PSI)",
  "Psychomotor Speed",
  "Cognitive Efficiency",
  "Attention/Executive",
  "Attention",
  "Attention Span",
  "Attentional Fluency",
  "Executive Function",
  "Planning",
  "Judgment",
  "Academic Skills",
  "Academic Fluency",
  "Reading",
  "Writing",
  "Math",
  "NAB Total Index",
  "NAB Attention Index",
  "NAB Language Index",
  "NAB Memory Index",
  "NAB Spatial Index",
  "NAB Executive Functions Index",
  "RBANS Total Index",
  "Global Neurocognitive Index (G)"
)

# Filter the data using the filter_data function from the bwu library
# The domain is specified by the 'domains' variable
# The scale is specified by the 'scales' variable
data_iq <- bwu::filter_data(data, domain = domains, scale = scales)
```

```{r}
#| label: qtbl-iq
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: true

# Set the default engine for tikz to "xetex"
options(tikzDefaltEngine = "xetex")

# Define the scales to include
include <- c(
  "General Ability",
  "General Ability (GAI)",
  "Crystallized Knowledge",
  "Fluid Reasoning",
  # "Cognitive Proficiency",
  "Processing Speed",
  "Working Memory",
  "NAB Total Index",
  "NAB Attention Index",
  "NAB Language Index",
  "NAB Memory Index",
  "NAB Spatial Index",
  "NAB Executive Functions Index"
)

# Filter the data to include only the specified scales
data_iq <- dplyr::filter(data_iq, scale %in% include)

# Define the variables to include in the output
variables <- c(
  "test", "test_name", "scale", "score", "z", "percentile", "range", "ci_95", "domain",
  "subdomain", "narrow", "test_type", "result"
)

# Select the specified variables from the data
iq <- data_iq |> dplyr::select(all_of(variables))

# Write the data to an Excel CSV file
readr::write_excel_csv(iq, "iq.csv", na = "", col_names = TRUE, append = FALSE)

# Define the table name, vertical padding, and multiline setting
table_name <- "table_iq"
vertical_padding <- 0
multiline <- TRUE

# Define the source note
source_note <- gt::md("Standard Score: Mean = 100 [50th‰], SD ± 15 [16th‰, 84th‰]")

# Define the groups for the table
grp_iq <- list(
  standard_score = c(
    "Composite Scores", "Test of Premorbid Functioning", "WAIS-IV", "WAIS-4",
    "WASI-2", "WISC-5", "WRAT-5", "KTEA-3", "NAB", "RBANS"
  )
)

# Create the table using the tbl_gt function from the bwu library
bwu::tbl_gt(
  data = data_iq,
  pheno = pheno,
  table_name = table_name,
  source_note = source_note,
  grp_standard_score = grp_iq[["standard_score"]],
  dynamic_grp = grp_iq,
  vertical_padding = vertical_padding,
  multiline = multiline
)
```

```{r}
#| label: text-iq
#| cache: true
#| include: false
bwu::cat_neuropsych_results(data = data_iq, file = "_02-01_iq_text.qmd")
```

```{r}
#| label: fig-iq
#| include: false
#| fig-cap: "_Premorbid Ability_ is an estimate of an individual's intellectual functioning prior to known or suspected onset of brain disease or dysfunction. _General Ability_ is the overall skill to reason, solve problems, and gain useful knowledge. _Crystallized Knowledge_ involves understanding the world through language and reasoning. _Fluid Reasoning_ is the logical analysis and solution of new problems, identifying underlying patterns, and applying logic."

# Define the scales to keep
keep <- c("General Ability", "Crystallized Knowledge", "Fluid Reasoning")

# Filter the data to keep only the specified scales
data_iq <- dplyr::filter(data_iq, scale %in% keep)

# Define the x and y variables for the dotplot
x <- data_iq$z
y <- data_iq$scale

# Define the colors for the dotplot (NULL means use default colors)
colors <- NULL

# Define whether to return the plot or save it to a file
# This is determined by the "RETURN_PLOT" environment variable
return_plot <- Sys.getenv("RETURN_PLOT")

# Define the filename for the plot
filename <- "fig_iq.svg"

# Create the dotplot using the dotplot function from the bwu library
bwu::dotplot(
  data = data_iq,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename
)
```


```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Merriweather", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [Table],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [
          _General Ability_ refers to an overall capacity to reason, to solve
          problems, and to learn useful information. _Crystallized Knowledge_
          involves understanding the world through language and reasoning.
          _Fluid Reasoning_ is the logical analysis and solution of new
          problems, identifying underlying patterns, and applying
          logic.#footnote[In the figures presented here and below, scores have
          been converted to _z_-scores, where an average score is 0 (zero) and the
          standard deviation is 1.0. Any scores below the −1.0 ticks are
          moderately concerning. Scores at or beyond the −2.0 ticks are
          clinically signficant and a cause for greater concern.]
        ],
      ),
      placement: none,
      kind: "image",
      supplement: [Figure],
      gap: 0.5em,
    ),
  )
}
```

```{=typst}
// Define the title of the domain
#let title = "General Cognitive Ability"

// Define the file name of the table
#let file_qtbl = "table_iq.png"

// Define the file name of the figure
#let file_fig = "fig_iq.svg"

// Call the 'domain' function with the specified title, table file name, and figure file name
// The title is appended with ' Index Scores'
#domain(title: [#title Index Scores], file_qtbl, file_fig)
```

